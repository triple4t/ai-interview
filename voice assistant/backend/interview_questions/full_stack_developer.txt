Easy (1-34)
1) What is full-stack development?
2) What is REST and why is it used?
3) Define CSR, SSR, and SSG.
4) What is a database index?
5) What are primary and foreign keys?
6) What is an ORM?
7) What is a component in React?
8) What is state vs props?
9) What is an API route in Next.js?
10) What is JWT and why use it?
11) What is CORS?
12) What is environment variable?
13) What is package.json used for?
14) What is type checking with TypeScript?
15) What is unit vs integration testing?
16) What is a migration in DB?
17) What is caching?
18) What is rate limiting?
19) What is a message queue?
20) What is CI/CD?
21) What is containerization?
22) What is a health check?
23) What is basic auth vs bearer token?
24) What is a 12-factor app?
25) What is logging and monitoring?
26) What is a schema validation?
27) What is SQL injection?
28) What is XSS?
29) What is CSRF?
30) What is the box model in CSS?
31) What is Flexbox?
32) What is debounce vs throttle?
33) What is WebSocket?
34) What is WebRTC?

Medium (35-67)
35) How would you build auth flow end-to-end (signup, login, refresh).
36) Design a profile CRUD with optimistic UI.
37) How would you implement file upload with presigned URLs.
38) How would you build a pagination API and UI.
39) How would you implement role-based access control.
40) How would you add rate limiting to critical endpoints.
41) Cache hot endpoints with invalidation.
42) How would you add request validation with Zod/Pydantic.
43) Design relational schema for a blog.
44) Avoid N+1 queries using ORM features.
45) How would you implement server-side rendering with data fetching.
46) How would you add i18n to a UI and persist user language.
47) How would you implement WebSocket chat with reconnection.
48) How would you add tracing to backend and surface in UI.
49) How would you implement error boundaries and error pages.
50) Deploy backend and frontend with CI/CD.
51) Secure cookies and SameSite attributes.
52) How would you implement CSP and sanitize HTML on client.
53) Optimize bundle with code splitting.
54) How would you build an admin dashboard with charts.
55) How would you add feature flags and remote config.
56) Monitor API with metrics and alerts.
57) How would you implement background jobs for emails.
58) How would you add search with Elasticsearch.
59) How would you build a resilient webhook receiver.
60) How would you implement data export/import flows.
61) Design a multi-tenant data model.
62) Plan a zero-downtime DB migration.
63) How would you implement GraphQL gateway for multiple services.
64) How would you add e2e tests with Playwright/Cypress.
65) How would you implement skeleton loading and Suspense.
66) Design a robust folder structure for monorepo.
67) How would you add canary deploys and rollbacks.

Hard (68-100)
68) Architect a SaaS platform multi-tenant end-to-end.
69) How would you implement active-active multi-region for critical services.
70) How would you build a cross-service auth and permissions system.
71) How would you implement a realtime collaboration system with CRDT.
72) Design a scalable search architecture.
73) How would you build an analytics pipeline with privacy guarantees.
74) How would you implement differential privacy for telemetry.
75) Design an event-driven architecture with sagas.
76) How would you implement zero-trust networking between services.
77) Design rate limiting at CDN, gateway, service layers.
78) How would you build a plugin platform with sandboxed runtimes.
79) How would you implement strong secrets mgmt and rotation.
80) Design high-throughput ingestion with Kafka.
81) How would you build resilient offline-first mobile-web sync.
82) Plan monolith to microservices migration.
83) How would you implement GraphQL federation across domains.
84) How would you build an authorization policy engine.
85) Design cost-aware autoscaling strategies.
86) How would you implement comprehensive observability platform.
87) How would you build a privacy-preserving data sharing system.
88) Design data lake/warehouse integration.
89) How would you implement immutable audit logs.
90) How would you build a backfill strategy for petabyte data.
91) Architect an experimentation platform.
92) How would you implement server-driven UI at scale.
93) Design canary analysis with stats.
94) How would you build a robust incident response playbook.
95) How would you implement compliance-ready deletion workflows.
96) Design a developer platform and golden paths.
97) How would you build regional feature gating and routing.
98) How would you implement WebRTC-based features across stack.
99) Architect a multi-cloud DR strategy.
100) How would you build a culture of reliability and SRE.


